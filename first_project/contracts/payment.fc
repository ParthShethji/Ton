#include "./imports/stdlib.fc";
        const const::min_tons_for_storage = 10000000; ;; 0.01 TON


(int, slice, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return(
        ds~load_uint(32),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
}

;; didnt use impure as no state change
;; If a function has inline specifier, its code is actually substituted in every place where the function is called. It is forbidden to use recursive calls in inlined functions.

() save_data(int counter, slice recent_sender, slice owner) impure inline {
    set_data(begin_cell()
        .store_uint(counter, 32)
        .store_slice(recent_sender)
        .store_slice(owner)
        .end_cell()
    );

}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice senders_address = cs~load_msg_addr();
    int op = cs~load_uint(32);

    var(counter, recent_sender, owner)= load_data();
    if(op == 1){
        save_data(counter + 1, recent_sender, owner);
        return ();
    }
    if(op == 2 ){
        ;; deposit
        return();
    }
    if(op == 3){

        ;; withdraw only owner
        throw_unless(104, equal_slice_bits(senders_address, owner));
        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(105, balance >= withdraw_amount);
        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);


        ;; internal msg with funds
        ;; send_raw_message is a standard function that accepts a cell with message and an integer that is containing sum of mode and flag. there are 3 modes and 3 flags u can combine or not 
        ;; In our example we want to send a regular message and pay transfer fees separately, so we use the Mode 0 and Flag +1 to get mode = 1.

        ;; get used to how data is stored in cells. This is called serialization. At this moment you will need to get familiar and used to this, as you will be serializing data into a cell quite often as everything is stored in cells.

        int msg_mode = 1; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)
    
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(senders_address)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        
        send_raw_message(msg.end_cell(), msg_mode);
        return();
    }
    throw(777);  ;;exit_code higher than 1, it is considered to be an error code,

}

(int, slice, slice) get_contract_storage_data() method_id {
    var(counter, recent_sender, owner)= load_data();
    return(
        counter,
        recent_sender,
        owner
    );        
}

    int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}